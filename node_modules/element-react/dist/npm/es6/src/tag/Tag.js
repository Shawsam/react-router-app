function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { Component, PropTypes, Transition, View } from '../../libs';

var Tag = function (_Component) {
  _inherits(Tag, _Component);

  function Tag(props) {
    _classCallCheck(this, Tag);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      visible: true
    };
    return _this;
  }

  Tag.prototype.handleClose = function handleClose() {
    var _this2 = this;

    this.setState({
      visible: false
    }, function () {
      setTimeout(function () {
        if (_this2.props.onClose) {
          _this2.props.onClose();
        }
      }, _this2.duration);
    });
  };

  Tag.prototype.render = function render() {
    var _props = this.props,
        type = _props.type,
        hit = _props.hit,
        closable = _props.closable,
        closeTransition = _props.closeTransition;


    return React.createElement(
      Transition,
      { name: closeTransition ? '' : 'el-zoom-in-center', duration: '200' },
      React.createElement(
        View,
        { key: this.state.visible, show: this.state.visible },
        React.createElement(
          'span',
          { style: this.style(), className: this.className('el-tag', type && 'el-tag--' + type, {
              'is-hit': hit
            }) },
          this.props.children,
          closable && React.createElement('i', { className: 'el-tag__close el-icon-close', onClick: this.handleClose.bind(this) })
        )
      )
    );
  };

  return Tag;
}(Component);

export default Tag;


Tag.propTypes = {
  closable: PropTypes.bool,
  type: PropTypes.string,
  hit: PropTypes.bool,
  closeTransition: PropTypes.bool,
  onClose: PropTypes.func
};