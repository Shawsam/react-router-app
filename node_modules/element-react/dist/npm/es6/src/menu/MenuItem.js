function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { PropTypes } from '../../libs';

import MixinComponent from './MixinComponent';

var MenuItem = function (_MixinComponent) {
  _inherits(MenuItem, _MixinComponent);

  function MenuItem(props) {
    _classCallCheck(this, MenuItem);

    var _this = _possibleConstructorReturn(this, _MixinComponent.call(this, props));

    _this.instanceType = 'MenuItem';
    return _this;
  }

  MenuItem.prototype.componentDidMount = function componentDidMount() {
    this.rootMenu().state.menuItems[this.props.index] = this;
  };

  MenuItem.prototype.handleClick = function handleClick() {
    this.rootMenu().handleSelect(this.props.index, this.indexPath(), this);
  };

  MenuItem.prototype.active = function active() {
    return this.props.index === this.rootMenu().state.activeIndex;
  };

  MenuItem.prototype.render = function render() {
    return React.createElement(
      'li',
      {
        style: this.style(),
        className: this.className("el-menu-item", {
          'is-active': this.active(),
          'is-disabled': this.props.disabled
        }),
        onClick: this.handleClick.bind(this)
      },
      this.props.children
    );
  };

  return MenuItem;
}(MixinComponent);

export default MenuItem;


MenuItem.propTypes = {
  index: PropTypes.string.isRequired,
  disabled: PropTypes.bool
};