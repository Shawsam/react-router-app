function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { Component, PropTypes } from '../../libs';

var RadioGroup = function (_Component) {
  _inherits(RadioGroup, _Component);

  function RadioGroup() {
    _classCallCheck(this, RadioGroup);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  RadioGroup.prototype.getChildContext = function getChildContext() {
    return {
      component: this
    };
  };

  RadioGroup.prototype.onChange = function onChange(value) {
    if (this.props.onChange) {
      this.props.onChange(value);
    }
  };

  RadioGroup.prototype.render = function render() {
    var _this2 = this;

    return React.createElement(
      'div',
      { ref: 'RadioGroup', style: this.style(), className: this.className('el-radio-group') },
      React.Children.map(this.props.children, function (element) {
        return React.cloneElement(element, Object.assign({}, element.props, {
          onChange: _this2.onChange.bind(_this2),
          model: _this2.props.value,
          size: _this2.props.size
        }));
      })
    );
  };

  return RadioGroup;
}(Component);

export default RadioGroup;


RadioGroup.childContextTypes = {
  component: PropTypes.any
};

RadioGroup.propTypes = {
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  disabled: PropTypes.bool,
  size: PropTypes.string,
  textColor: PropTypes.string,
  fill: PropTypes.string,
  onChange: PropTypes.func
};